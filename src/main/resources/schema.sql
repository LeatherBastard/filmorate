
CREATE TABLE ratings(
	rating_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	name VARCHAR(10),
	description VARCHAR(200)
);

CREATE TABLE films(
	film_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	title VARCHAR(255),
	description VARCHAR(500),
	release_date DATE,
	duration INT,
	rating_id INT,
	CONSTRAINT fk_rating
	FOREIGN KEY(rating_id)
	REFERENCES ratings(rating_id)
);


CREATE TABLE genres
(
	genre_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	name VARCHAR(20)	
);

CREATE TABLE film_genres
(
	film_id INT,
	genre_id INT,
	CONSTRAINT fk_film
	FOREIGN KEY(film_id)
	REFERENCES films(film_id),
	CONSTRAINT fk_genre
	FOREIGN KEY(genre_id)
	REFERENCES genres(genre_id),
	PRIMARY KEY(film_id,genre_id)
);

CREATE TABLE users
(
	user_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	email VARCHAR(100),
	login VARCHAR(100),
	name VARCHAR(20),	
	birthday DATE
);

CREATE TABLE likes
(
	film_id INT,
	user_id INT,
	CONSTRAINT fk_film
	FOREIGN KEY(film_id)
	REFERENCES films(film_id),
	CONSTRAINT fk_user
	FOREIGN KEY(user_id)
	REFERENCES users(user_id),
	PRIMARY KEY(film_id,user_id)
);

CREATE TABLE statuses(
	status_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	name VARCHAR(20)
);

CREATE TABLE friendship
(
	user_id INT,
	friend_id INT,
	status_id INT,
	CONSTRAINT user_not_equal_friend CHECK (user_id !=friend_id),
	CONSTRAINT fk_user
	FOREIGN KEY(user_id)
	REFERENCES users(user_id),
	CONSTRAINT fk_friend
	FOREIGN KEY(friend_id)
	REFERENCES users(user_id),
	PRIMARY KEY(user_id,friend_id),
	CONSTRAINT fk_status
	FOREIGN KEY(status_id)
	REFERENCES statuses(status_id)
);