
DROP TABLE IF EXISTS ratings CASCADE;
DROP TABLE IF EXISTS films CASCADE;
DROP TABLE IF EXISTS genres CASCADE;
DROP TABLE IF EXISTS film_genres CASCADE;
DROP TABLE IF EXISTS users CASCADE;
DROP TABLE IF EXISTS likes CASCADE;
DROP TABLE IF EXISTS statuses CASCADE;
DROP TABLE IF EXISTS friendship CASCADE;


CREATE TABLE ratings(
	rating_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	name VARCHAR(20),
	description VARCHAR(200)
);

CREATE TABLE films(
	film_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	title VARCHAR(255) NOT NULL,
	description VARCHAR(200),
	release_date DATE NOT NULL,
	duration INT NOT NULL,
	rating_id INT NOT NULL,
	CONSTRAINT fk_film_rating
	FOREIGN KEY(rating_id)
	REFERENCES ratings(rating_id)
);


CREATE TABLE genres
(
	genre_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	name VARCHAR(50) NOT NULL
);

CREATE TABLE film_genres
(
	film_id INT NOT NULL,
	genre_id INT NOT NULL,
	CONSTRAINT fk_film_genre
	FOREIGN KEY(film_id)
	REFERENCES films(film_id),
	CONSTRAINT fk_genre
	FOREIGN KEY(genre_id)
	REFERENCES genres(genre_id),
	PRIMARY KEY(film_id,genre_id)
);

CREATE TABLE users
(
	user_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	email VARCHAR(100) NOT NULL,
	login VARCHAR(100) NOT NULL,
	name VARCHAR(20),
	birthday DATE NOT NULL
);

CREATE TABLE likes
(
	film_id INT NOT NULL,
	user_id INT NOT NULL,
	CONSTRAINT fk_film_like
	FOREIGN KEY(film_id)
	REFERENCES films(film_id),
	CONSTRAINT fk_user_like
	FOREIGN KEY(user_id)
	REFERENCES users(user_id),
	PRIMARY KEY(film_id,user_id)
);

CREATE TABLE statuses(
	status_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	name VARCHAR(20) NOT NULL
);

CREATE TABLE friendship
(
	user_id INT NOT NULL,
	friend_id INT NOT NULL,
	status_id INT NOT NULL,
	CONSTRAINT user_not_equal_friend CHECK (user_id != friend_id),
	CONSTRAINT fk_user_friendship
	FOREIGN KEY(user_id)
	REFERENCES users(user_id),
	CONSTRAINT fk_friend_friendship
	FOREIGN KEY(friend_id)
	REFERENCES users(user_id),
	PRIMARY KEY(user_id,friend_id),
	CONSTRAINT fk_status_friendship
	FOREIGN KEY(status_id)
	REFERENCES statuses(status_id)
);